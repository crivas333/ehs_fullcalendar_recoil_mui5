
eventSources: [
  // your event source
  {
    events: (fetchInfo, successCallback, failureCallback) => {
      this.loadEvents(fetchInfo.start, fetchInfo.end, fetchInfo.timeZone, successCallback);
    },
    id: 'myremotesource'
  }

  in v5, specifying the second argument as true will have this effect:
https://fullcalendar.io/docs/Calendar-addEvent
calendar.addEvent( event [, source ] )

export default class DemoApp extends React.Component {

  calendarRef = React.createRef()

  render() {
    return (
      <FullCalendar ref={this.calendarRef} plugins={[ dayGridPlugin ]} />
    )
  }

  someMethod() {
    let calendarApi = this.calendarRef.current.getApi()
    calendarApi.next()
  }

}

const usePrevious = (value) => {
    const ref = React.useRef()

    React.useEffect(() => {
      ref.current = value
    }, [value])

    return ref.current
}